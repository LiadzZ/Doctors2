Doctors Functions:

public bool verifyPatient(string pid)
        {
            UserDAL usrDAL = new UserDAL();
            List<User> usr = (from x in usrDAL.Users where x.ID.Equals(pid) select x).ToList<User>();
            
            if ( usr.Count == 0)
            {
                return false;
            }
            return true;
        }



 public ActionResult MyInfo()
        {
            if (verifyDoctor() == false)
            {
                TempData["WarningMessage"] = "Don't go to places you are not allowed.";
                return RedirectToAction("LogOut", "Home");
            }
            DoctorDAL queDAL = new DoctorDAL();
            var tempID = Session["DoctorLoggedIn"].ToString();
            List<Doctor> doc = (from x in queDAL.Doctors where x.DID.Equals(tempID) select x).ToList<Doctor>();
            
            ViewBag.TempDoc = doc;
            return View();
        }


        public ActionResult GetQueuesByJson()
        {
            if (verifyDoctor() == false)
            {
                TempData["WarningMessage"] = "Don't go to places you are not allowed.";
                return RedirectToAction("LogOut", "Home");
            }
            QueueDAL dal = new QueueDAL();
            List<Queue> objQueues = dal.Queues.ToList<Queue>();
            return Json(objQueues, JsonRequestBehavior.AllowGet);
        }







public ActionResult AddQueue()
        {
            if (verifyDoctor() == false)
            {
                TempData["WarningMessage"] = "Don't go to places you are not allowed.";
                return RedirectToAction("LogOut", "Home");
            }
            return View();
        }










public ActionResult QueueAdd(Queue que)
        {
            //verify 
            if (Session["DoctorLoggedIn"].ToString() != que.DID)
            {
                TempData["UnknownUser"] = "Wrong DID";
                return RedirectToAction("ShowAppointments", "Doctor");
            }
            if (verifyDoctor() == false)
            {
                TempData["WarningMessage"] = "Don't go to places you are not allowed.";
                return RedirectToAction("LogOut", "Home");
            }
            if (que.PID != null)
            {
                if (verifyPatient(que.PID.ToString()) == false)
                {
                    TempData["UnknownUser"] = "This user is not registerd to the system.";
                    return RedirectToAction("ShowAppointments", "Doctor");
                }
            }
            if (ModelState.IsValid)
            {
                
                QueueDAL queDAL = new QueueDAL();
               
                try
                {
                    //Add and save queue.
                    queDAL.Queues.Attach(que);
                    queDAL.Queues.Add(que);
                    queDAL.SaveChanges();
                    Session["DuplicateQueue"] = null;
                    List<Queue> objQueues = queDAL.Queues.ToList<Queue>();
                    //que = new Queue();
                    //return Json(Url.Action("ShowAppointments", "Doctor"));
                    return Json(objQueues,JsonRequestBehavior.AllowGet);
                    //return RedirectToAction("ShowAppointments", "Doctor");
                }
                catch(Exception)
                {
                    queDAL.Queues.Remove(que);
                    Session["DuplicateQueue"] = true;
                    List<Queue> objQueues = queDAL.Queues.ToList<Queue>();
                    //que = new Queue();
                    return Json(objQueues,JsonRequestBehavior.AllowGet);

                    //return RedirectToAction("ShowAppointments", "Doctor");
                }

            }
            Session["DuplicateQueue"] = null;
            QueueDAL queDAL2 = new QueueDAL();
            List<Queue> objQueues2 = queDAL2.Queues.ToList<Queue>();
            //return RedirectToAction("ShowAppointments", "Doctor");
            //que = new Queue();
            return Json(objQueues2,JsonRequestBehavior.AllowGet);
        }





public ActionResult QueueDelete(DateTime date,string did,bool mode, string pid)
        {
            //verify the doctor
            if (verifyDoctor() == false)
            {
                TempData["WarningMessage"] = "Don't go to places you are not allowed.";
                return RedirectToAction("LogOut", "Home");
            }
            //open connection to dbo.tblDoctors DB.
            QueueDAL que = new QueueDAL();
            

            Queue queTemp = new Queue();
            queTemp.date = date;
            queTemp.DID = did;
            queTemp.mode = mode;
            queTemp.PID = pid;
            que.Queues.Attach(queTemp);
            que.Queues.Remove(queTemp);
            que.SaveChanges();
            return RedirectToAction("ShowAppointments","Doctor");
        }








public ActionResult ShowAppointments()
        {
            if (verifyDoctor() == false)
            {
                TempData["WarningMessage"] = "Don't go to places you are not allowed.";
                return RedirectToAction("LogOut", "Home");
            }
            QueueDAL que = new QueueDAL();
            

            string docID = Session["DoctorLoggedIn"].ToString();
            List<Queue> queueOBJ = (from x in que.Queues where x.DID.Equals(docID) select x).ToList<Queue>();
            ViewBag.QueueList = queueOBJ;
           
            //return Json(queueOBJ, JsonRequestBehavior.AllowGet);
            return View();
            
        }
